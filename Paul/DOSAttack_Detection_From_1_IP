import socket
import threading
import time

# Server IP and port
server_ip = '0.0.0.0'  # Listen on all available network interfaces
server_port = 12345  # Choose an available port

# Threshold for UDP packet rate (packets per second)
attack_threshold = 100  # Adjust this value based on your traffic patterns

# Dictionary to store packet counts per source IP
packet_counts = {}

# Function to detect and respond to attacks
def detect_attack():
    while True:
        current_time = time.time()
        for source_ip, (count, last_time) in list(packet_counts.items()):
            if current_time - last_time > 1:
                del packet_counts[source_ip]
                continue

            if count > attack_threshold:
                print(f"Possible DDoS attack from {source_ip} detected with {count} packets/s")

        time.sleep(1)

# Create a UDP socket
server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# Bind the socket to the server address
server_socket.bind((server_ip, server_port))

print(f"Listening for UDP packets on {server_ip}:{server_port}")

# Start the detection thread
detection_thread = threading.Thread(target=detect_attack)
detection_thread.daemon = True
detection_thread.start()

while True:
    # Receive data from the client
    data, client_address = server_socket.recvfrom(1024)

    # Update packet count for the source IP
    source_ip = client_address[0]
    packet_counts[source_ip] = packet_counts.get(source_ip, (0, 0))
    packet_counts[source_ip] = (packet_counts[source_ip][0] + 1, time.time())

    # Decode and print the received data
    message = data.decode()
    print(f"Received from {client_address}: {message}")

